{======================================================================
======================================================================}
const
    _MoneyPosX        = 0x58F5FC
    _MoneyPosY        = 0x58F5DC
    _MoneyWidth       = 0x58F564
    _MoneyHeight      = 0x58F54E
    _MoneyBorderInt   = 0x58F58F
    _MoneyBorderByte1 = 0x58F58D
    _MoneyBorderByte2 = 0x58F586
    _MoneyColor       = 0x58F499
    
    _ClockWidth       = 0x58EB47
    _ClockHeight      = 0x58EB31
    _ClockBorderInt   = 0x58EB72
    _ClockBorderByte1 = 0x58EB70
    _ClockColor       = 0x58EBD1
end

{======================================================================
======================================================================}
:InitializeParameters
0AC6: 0@ = label @IncrementalOffset offset
0A8C: write_memory 0@ size 4 value 1.0 virtual_protect 0

0AC6: 0@ = label @Money_PosX offset 
0A8C: write_memory 0@ size 4 value 32.0 virtual_protect 0
0AC6: 0@ = label @Money_PosY offset 
0A8C: write_memory 0@ size 4 value 89.0 virtual_protect 0
0AB1: @ChangeMoneyPosition 2 xy_pos 32.0 89.0

0AC6: 0@ = label @Money_Height offset 
0A8C: write_memory 0@ size 4 value 0.55 virtual_protect 0
0AC6: 0@ = label @Money_Width offset 
0A8C: write_memory 0@ size 4 value 1.1 virtual_protect 0
0AB1: @ChangeMoneySize 2 width 0.55 height 1.1

0AC6: 0@ = label @Money_ShadowDistance offset 
0A8C: write_memory 0@ size 1 value 0 virtual_protect 0
0AC6: 0@ = label @Money_Border offset 
0A8C: write_memory 0@ size 4 value 0x189FFD virtual_protect 0
0AC6: 0@ = label @Money_Border1 offset 
0A8C: write_memory 0@ size 1 value 2 virtual_protect 0
0AB1: @ChangeMoneyBorder 3 border 0x189FFD border1 2 shadow 0
{
0A8D: 0@ = read_memory 0x58EC14 size 1 virtual_protect 0 // x-pos related
0A8D: 1@ = read_memory 0x58EC15 size 4 virtual_protect 0 // x-pos
0A8D: 11@ = read_memory 1@ size 4 virtual_protect 1
0AD0: show_formatted_text_lowpriority "X-Pos: %f, X-Pos related: %d" time 6000 11@ 0@

// Unknown pos-x and pos-y real addresses
0AC6: 0@ = label @Clock_PosX offset 
0A8C: write_memory 0@ size 4 value 32.0 virtual_protect 0
0AC6: 0@ = label @Clock_PosY offset 
0A8C: write_memory 0@ size 4 value 89.0 virtual_protect 0
0AB1: @WriteParameter 3 param_label @Clock_PosX param_value 32.0 param_real_address 2@
//0AB1: @WriteParameter 3 param_label @Clock_PosY param_value 89.0 param_real_address 2@

}
0AC6: 0@ = label @Clock_Width offset 
0A8C: write_memory 0@ size 4 value 0.55 virtual_protect 0
0AC6: 0@ = label @Clock_Height offset 
0A8C: write_memory 0@ size 4 value 1.1 virtual_protect 0
0AB1: @WriteFloatParameter 3 param_label @Clock_Width param_value 0.55 param_real_address _ClockWidth
0AB1: @WriteFloatParameter 3 param_label @Clock_Height param_value 1.1 param_real_address _ClockHeight

{
0AC6: 0@ = label @Var offset 
0A8D: 1@ = read_memory __var_addr__ size 4 virtual_protect 1
0A8D: 2@ = read_memory 1@ size 4 virtual_protect 1
0A8C: write_memory 0@ size 4 value 2@ virtual_protect 0
}

// Money
0AB1: @IntializeLine 5 var 0 line 0 mem_addr 0 var_label @IncrementalOffset
0AB1: @IntializeLine 5 var 0 line 1 mem_addr _MoneyPosX var_label @Money_PosX
0AB1: @IntializeLine 5 var 0 line 2 mem_addr _MoneyPosY var_label @Money_PosY
0AB1: @IntializeLine 5 var 0 line 3 mem_addr _MoneyWidth var_label @Money_Width
0AB1: @IntializeLine 5 var 0 line 4 mem_addr _MoneyHeight var_label @Money_Height
0AB1: @IntializeLine 5 var 0 line 5 mem_addr _MoneyBorderInt var_label @Money_Border
0AB1: @IntializeLine 5 var 0 line 6 mem_addr _MoneyBorderByte1 var_label @Money_Border1
0AB1: @IntializeLine 5 var 0 line 7 mem_addr _MoneyBorderByte2 var_label @Money_ShadowDistance
0AB2: ret 0

{======================================================================
======================================================================}
:IntializeLine // var 0@ line 1@ mem_addr 2@ var_label 3@
0AB1: @GetDrawMenuLength 0 ret 5@
006A: 5@ *= 0@  // (int)

6@ = 8
6@ *= 6
6@ += 8   // 2 ints
006A: 6@ *= 1@  // (int)

5@ += 8
5@ += 40 // 8*5
5@ += 4
0AC6: 10@ = label @DrawMenu offset
005A: 10@ += 5@  // (int)
005A: 10@ += 6@  // (int)

0A8C: write_memory 10@ size 4 value 2@ virtual_protect 0 // Memory Address
10@ += 4

0AC6: 11@ = label 3@ offset
0A8C: write_memory 10@ size 4 value 11@ virtual_protect 0 // Var Address
0AB2: ret 0

{======================================================================
======================================================================}
:MoveMoneyPosition // 0@: x offset, 1@: y offset
0AC6: 10@ = label @Money_PosX offset
0A8D: 11@ = read_memory 10@ size 4 virtual_protect 0
005B: 11@ += 0@  // (float)
0A8C: write_memory 10@ size 4 value 11@ virtual_protect 0
0AC6: 20@ = label @Money_PosY offset
0A8D: 21@ = read_memory 20@ size 4 virtual_protect 0
005B: 21@ += 1@  // (float)
0A8C: write_memory 20@ size 4 value 21@ virtual_protect 0
0AB1: @ChangeMoneyPosition 2 xy_pos 11@ 21@
0AB2: ret 0

:ChangeMoneyPosition // 0@: x position, 1@: y position
0AC6: 2@ = label @Money_PosY offset 
0A8C: write_memory 2@ size 4 value 1@ virtual_protect 0
0A8C: write_memory _MoneyPosY size 4 value 2@ virtual_protect 1 // Money Position Y

0AC6: 2@ = label @Money_PosX offset 
0A8C: write_memory 2@ size 4 value 0@ virtual_protect 0
0A8C: write_memory _MoneyPosX size 4 value 2@ virtual_protect 1 // Money Position X
0AB2: ret 0

:Money_PosX
hex
00 00 00 00
end

:Money_PosY
hex
00 00 00 00
end

:IncMoneySize // 0@: w offset, 1@: h offset
0AC6: 10@ = label @Money_Width offset
0A8D: 11@ = read_memory 10@ size 4 virtual_protect 0
005B: 11@ += 0@  // (float)
0A8C: write_memory 10@ size 4 value 11@ virtual_protect 0
0AC6: 20@ = label @Money_Height offset
0A8D: 21@ = read_memory 20@ size 4 virtual_protect 0
005B: 21@ += 1@  // (float)
0A8C: write_memory 20@ size 4 value 21@ virtual_protect 0
0AB1: @ChangeMoneySize 2 width 11@ height 21@
0AB2: ret 0

:ChangeMoneySize // 0@: width, 1@: height
0AC6: 2@ = label @Money_Height offset 
0A8C: write_memory 2@ size 4 value 1@ virtual_protect 0
0A8C: write_memory _MoneyHeight size 4 value 2@ virtual_protect 1 // Money height

0AC6: 2@ = label @Money_Width offset 
0A8C: write_memory 2@ size 4 value 0@ virtual_protect 0
0A8C: write_memory _MoneyWidth size 4 value 2@ virtual_protect 1 // Money width
0AB2: ret 0

:Money_Width
hex
00 00 00 00
end

:Money_Height
hex
00 00 00 00
end

:IncMoneyBorder // 0@: border offset, 1@: border1 ? offset, 2@: shadow distance offset
0A8D: 10@ = read_memory _MoneyBorderByte2 size 1 virtual_protect 1
0A8D: 11@ = read_memory _MoneyBorderByte1 size 1 virtual_protect 1
0A8D: 12@ = read_memory _MoneyBorderInt size 4 virtual_protect 1
005A: 10@ += 2@  // (int)
005A: 11@ += 1@  // (int)
005A: 12@ += 0@  // (int)
if 12@ > 0x189FFD
then 12@=0x189FFD
end
if and
12@ > 0x189FED
0x189FF1 > 12@
then
    if 0@>0
    then 12@=0x189FF1
    else 12@=0x189FED
    end
end
if and
12@ > 0x189FE9
0x189FEB > 12@
then
    if 0@>0
    then 12@=0x189FEB
    else 12@=0x189FE9
    end
end
if and
12@ > 0x189FE4
0x189FE9 > 12@
then
    if 0@>0
    then 12@=0x189FE9
    else 12@=0x189FE4
    end
end
if 12@ == 0x189FE2 // 0x189FE2 makes crash
then
    if 0@>0
    then 12@=0x189FE3
    else 12@=0x189FE1
    end
end
if
0x189FE1 > 12@
then 12@=0x189FE1
end
// III hud uses this value 0x189F5D
0AC6: 20@ = label @Money_Border offset
0A8C: write_memory 20@ size 4 value 12@ virtual_protect 0
0AC6: 20@ = label @Money_Border1 offset
0A8C: write_memory 20@ size 1 value 11@ virtual_protect 0
0AC6: 20@ = label @Money_ShadowDistance offset
0A8C: write_memory 20@ size 1 value 10@ virtual_protect 0
0AB1: @ChangeMoneyBorder 3 border 12@ border1 11@ shadow 10@
0AB2: ret 0

:ChangeMoneyBorder // 0@: border, 1@: border1, 2@: shadow distance
0A8C: write_memory _MoneyBorderByte2 size 1 value 2@ virtual_protect 1 // Money shadow distance
0A8C: write_memory _MoneyBorderByte1 size 1 value 1@ virtual_protect 1 // something possibly related to border, unknown
0A8C: write_memory _MoneyBorderInt size 4 value 0@ virtual_protect 1 // Money border 2
0AB2: ret 0

:Money_Border
hex
00 00 00 00
end

:Money_ShadowDistance
hex
00
end

:Money_Border1
hex
00
end


:WriteFloatParameter // 0@: param label, 1@: param value, 2@: param real address
0AC6: 10@ = label 0@ offset 
0A8C: write_memory 10@ size 4 value 1@ virtual_protect 0
0A8C: write_memory 2@ size 4 value 10@ virtual_protect 1
0AB2: ret 0

:AddOffsetToFloatParameter // 0@: param label, 1@: param offset, 2@: param real address
0AC6: 10@ = label 0@ offset
0A8D: 11@ = read_memory 10@ size 4 virtual_protect 0
005B: 11@ += 1@  // (float)
0A8C: write_memory 10@ size 4 value 11@ virtual_protect 0
0AB1: @WriteFloatParameter 3 param_label 0@ param_value 11@ param_real_address 2@
0AB2: ret 0


:WriteInt8Parameter // real_addr 0@ param_value 1@
0A8C: write_memory 0@ size 1 value 1@ virtual_protect 1
0AB2: ret 0

:AddOffsetToInt8Parameter // param_label 0@ param_offset 1@ real_addr 2@
0A8D: 10@ = read_memory 2@ size 1 virtual_protect 1
005A: 10@ += 1@  // (int)
0AC6: 20@ = label 0@ offset
0A8C: write_memory 20@ size 1 value 10@ virtual_protect 0
0AB1: @WriteInt8Parameter 2 real_addr 2@ param_value 10@
0AB2: ret 0


:WriteInt32Parameter // real_addr 0@ param_value 1@
0A8C: write_memory 0@ size 4 value 1@ virtual_protect 1
0AB2: ret 0

:AddOffsetToInt32Parameter // param_label 0@ param_offset 1@ real_addr 2@
0A8D: 10@ = read_memory 2@ size 4 virtual_protect 1
005A: 10@ += 1@  // (int)
0AC6: 20@ = label 0@ offset
0A8C: write_memory 20@ size 4 value 10@ virtual_protect 0
0AB1: @WriteInt32Parameter 2 real_addr 2@ param_value 10@
0AB2: ret 0


:Clock_PosX
hex
00 00 00 00
end

:Clock_PosY
hex
00 00 00 00
end

:Clock_Width
hex
00 00 00 00
end

:Clock_Height
hex
00 00 00 00
end

