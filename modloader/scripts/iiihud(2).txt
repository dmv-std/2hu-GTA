// This file was decompiled using SASCM.ini published by GTAG (http://gtag.gtagaming.com/opcode-database) on 14.6.2013
{$CLEO .cs}

//-------------MAIN---------------
0AC7: 4@ = var 31@ offset 
0AC6: 1@ = label @Noname_6385 offset 
0AC6: 2@ = label @Noname_6461 offset 
2@ += 2 
0AC6: 3@ = label @Noname_6297 offset 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 8 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 7443360 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5812397 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 7443728 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 7 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5811615 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 6 
0AC6: 3@ = label @Noname_6325 offset 
3@ += 36 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 8 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 7443328 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5821161 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 15 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 4798033 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 6 
0A8C: write_memory 2@ size 4 value 4@ virtual_protect 0 
2@ += 63 
0AC6: 3@ = label @Noname_6413 offset 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5827502 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 9 
0AC6: 3@ = label @Noname_6423 offset 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5827502 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 11 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5827497 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 11 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5730443 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 7 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5730443 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 14 
0AC6: 3@ = label @Noname_6433 offset 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5742952 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 8 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5742437 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0AC6: 3@ = label @Noname_6447 offset 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5742952 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 15 
0AC6: 3@ = label @Noname_6225 offset 
3@ += 4 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5827610 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 6 
0AC6: 3@ = label @Noname_6225 offset 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0 
2@ += 5 
0A8E: 3@ = 2@ + 4 // int 
0A8F: 3@ = 5827610 - 3@ // int 
0A8C: write_memory 2@ size 4 value 3@ virtual_protect 0

// 12235308 is 0xBAB22C (Base Colours) with offset 0 (Health Bar, Red Stuff)    Offset    ID     Stuff
0A8C: write_memory 12235308 size 4 value 0xFF492B71 virtual_protect 0   //      0         0      Health Bar, Red Stuff
0A8C: write_memory 12235312 size 4 value 0xFF6AA05F virtual_protect 0   //      4         1      Cash/Money, Entered Car Name Text, Green Stuff
0A8C: write_memory 12235316 size 4 value 0xFFF3A780 virtual_protect 0   //      8         2      Blue Stuff
0A8C: write_memory 12235332 size 4 value 0xFF02ACDC virtual_protect 0   //      24        6      Map Lines (Brown/Yellow)
0A8C: write_memory 12235336 size 4 value 0xFFFC6EA8 virtual_protect 0   //      28        7      Pink, Purple Stuff
0A8C: write_memory 12235352 size 4 value 0xFF6AC4D2 virtual_protect 0   //      44        11     Yellow Stuff

// Clock
0AC6: 2@ = label @Noname_6213 offset 
0A8C: write_memory 0x58EB31 size 4 value 2@ virtual_protect 1 // Clock height           D8 0D 148F8500:     fmul    dword ptr [00858F14]        overwriting address (00858F14)

0AC6: 2@ = label @Noname_6213 offset 
2@ += 4 
0A8C: write_memory 0x58EB47 size 4 value 2@ virtual_protect 1 // Clock width            D8 0D AC6C8600:     fmul    dword ptr [00866CAC]        overwriting address

0A8C: write_memory 0x58EB70 size 1 value 1 virtual_protect 1 // Clock border            6A 02:              push    02                          6A 01:          push 01
0A8C: write_memory 0x58EB72 size 4 value 0x18A9FA virtual_protect 1 // border           E8 1AAA1800:        call    00719590                    E8 FAA91800:    call 00719570
0A8C: write_memory 0x58EBD1 size 4 value 1@ virtual_protect 1 // Clock color            B9 2CB2BA00:        mov     ecx,00BAB22C                overwriting address


// Money
0AC6: 2@ = label @Noname_6213 offset 
2@ += 8 
0A8C: write_memory 0x58EC04 size 4 value 2@ virtual_protect 1 //                        8C 8F 8500D95C:     mov     [edi+5CD90085],cs           overwriting address
0A8C: write_memory 0x588B89 size 1 value 0xEB virtual_protect 1 //                      7A 1F:              jp      00588BAA                    EB 1F:          jmp 00588BAA
0AC6: 2@ = label @Noname_6213 offset 
0A8C: write_memory 0x58F54E size 4 value 2@ virtual_protect 1 // Money height           D8 0D 148F8500:     fmul    dword ptr [00858F14]        overwriting address
0AC6: 2@ = label @Noname_6213 offset 
2@ += 4 
0A8C: write_memory 0x58F564 size 4 value 2@ virtual_protect 1 // Money width            D8 0D AC6C8600:     fmul    dword ptr [00866CAC]        overwriting address
0A8C: write_memory 0x58F499 size 4 value 1@ virtual_protect 1 // Money color            B9 2CB2BA00:        mov     ecx,00BAB22C                overwriting address
0A8C: write_memory 0x58F586 size 1 value 1 virtual_protect 1 // Money shadow distance   6A 00:              push    00                          overwriting value
0A8C: write_memory 0x58F58D size 1 value 1 virtual_protect 1 // Money border distance ? 6A 02:              push    02                          overwriting value
0A8C: write_memory 0x58F58F size 4 value 0x189FE4 virtual_protect 1 // Money border 2   E8 FD9F1800:        call    00719590                    overwriting address
0AC6: 2@ = label @Noname_6237 offset 
0A8C: write_memory 0x58F5DC size 4 value 2@ virtual_protect 1 // Money Position Y       0D 886C8600:        or      eax,866C88                  overwriting address
0AC6: 2@ = label @Noname_6225 offset 
2@ += 8 
0A8C: write_memory 0x58F5FC size 4 value 2@ virtual_protect 1 // Money Position X       D8 0D 0C958500:     fmul    dword ptr [0085950C]        overwriting address

// Weapon
0AC6: 2@ = label @Noname_6237 offset 
2@ += 4 
0A8C: write_memory 0x58F913 size 4 value 2@ virtual_protect 1 // Weapon position Y      0D A48B8500:        or      eax,858BA4                  overwriting address

0AC6: 2@ = label @Noname_6237 offset 
2@ += 8 
0A8C: write_memory 0x58F927 size 4 value 2@ virtual_protect 1 // Weapon position X      D8 0D 0C958500:     fmul    dword ptr [0085950C]        overwriting address

0AC6: 2@ = label @Noname_6249 offset // Weapon box Size
0A8C: write_memory 0x58D896 size 4 value 2@ virtual_protect 1 // Height
0A8C: write_memory 0x58D8CB size 4 value 2@ virtual_protect 1 // Width
0A8C: write_memory 0x58D935 size 4 value 2@ virtual_protect 1 // Width
0A8C: write_memory 0x58D94D size 4 value 2@ virtual_protect 1 // Height


// Weapon Ammo
0AC6: 2@ = label @Noname_6253 offset 
0A8C: write_memory 0x5894B7 size 4 value 2@ virtual_protect 1 // Ammo text height

0AC6: 2@ = label @Noname_6257 offset 
0A8C: write_memory 0x5894CD size 4 value 2@ virtual_protect 1 // Ammo text width

0A8C: write_memory 0x589505 size 1 value 0 virtual_protect 1 // Ammo text border        6A 01:              push    01                          overwriting value
0A8C: write_memory 0x5895F7 size 4 value 1@ virtual_protect 1 // Ammo text color        B9 2CB2BA00:        mov     ecx,00BAB22C                overwriting address
0A8C: write_memory 0x5895FD size 1 value 6 virtual_protect 1 // Ammo text color 2?      6A 03:              push    03                          overwriting value

0AC6: 2@ = label @Noname_6237 offset 
2@ += 4 
0A8C: write_memory 0x58F9DC size 4 value 2@ virtual_protect 1 // Ammo text Y-position   05 A48B8500:        add     eax,00858BA4                overwriting address

0AC6: 2@ = label @Noname_6261 offset 
0A8C: write_memory 0x58F9E6 size 4 value 2@ virtual_protect 1 // Ammo text Y-pos 2?     0D 786C8600:        or      eax,866C78                  overwriting address

0AC6: 2@ = label @Noname_6237 offset 
2@ += 8 
0A8C: write_memory 0x58FA02 size 4 value 2@ virtual_protect 1 // Ammo text X-position



// Wanted Level Stars
0AC6: 2@ = label @Noname_6265 offset
0A8C: write_memory 0x58FA12 size 4 value 2@ virtual_protect 1 // ???                    0D 4C6C8600:        or      eax,866C4C                  overwriting address
0A8C: write_memory 0x58DD1B size 2 value 0x9090 virtual_protect 1 // Show inactive wanted stars always
0A8C: write_memory 0x58DD43 size 4 value 0x0018B829 virtual_protect 1 // Remove black thin border to Active wanted stars        E8 49B81800:        call    00719590            overwriting address (29B81800)
0A8C: write_memory 0x58DDC9 size 1 value 4 virtual_protect 1 // Active wanted stars color                                       6A 06:              push    06                  overwriting value
0A8C: write_memory 0x58DDD0 size 4 value 1@ virtual_protect 1 // Active wanted stars color                                      B9 2CB2BA00:        mov     ecx,00BAB22C        overwriting address
0A8C: write_memory 0x58DE23 size 1 value 0xEB virtual_protect 1 // Active wanted stars, position Y                              7A 22:              jp      0058DE47            changing to EB 1F: jmp 0058DE47

// Suspended Wanted Level Stars Color (Flashing Stars when entered pay'n'spray)
0A8E: 2@ = 1@ + 18 // int 
0A8C: write_memory 0x58DE77 size 4 value 2@ virtual_protect 1 //                        0FB6 05 46B2BA00:   movzx   eax,byte ptr [00BAB246]     overwriting address
2@ -= 1 
0A8C: write_memory 0x58DE92 size 4 value 2@ virtual_protect 1 //                        0FB6 0D 45B2BA00:   movzx   ecx,byte ptr [00BAB245]     overwriting address
2@ -= 1 
0A8C: write_memory 0x58DEAD size 4 value 2@ virtual_protect 1 //                        0FB6 15 44B2BA00:   movzx   edx,byte ptr [00BAB244]     overwriting address

// Shape (or size) of unactive wanted stars
0A8C: write_memory 0x58DE84 size 6 value 0x90 virtual_protect 1 
0A8C: write_memory 0x58DE9F size 6 value 0x90 virtual_protect 1 
0A8C: write_memory 0x58DEBA size 6 value 0x90 virtual_protect 1 
0A8C: write_memory 0x58DF29 size 6 value 0x90 virtual_protect 1 // This makes darker unactive wanted stars
0A8C: write_memory 0x58DF61 size 6 value 0x90 virtual_protect 1 // height unactive wanted stars
0A8C: write_memory 0x58DF7D size 6 value 0x90 virtual_protect 1 // width unactive wanted stars

0AC6: 2@ = label @Noname_6269 offset
0A8C: write_memory 0x58DDFC size 4 value 2@ virtual_protect 1 // Active wanted stars, position Y
0A8C: write_memory 0x58DEF5 size 4 value 2@ virtual_protect 1

0AC6: 2@ = label @Noname_6273 offset 
0A8C: write_memory 0x58DFB3 size 4 value 2@ virtual_protect 1 // Inactive wanted stars, position Y

0AC6: 2@ = label @Noname_6277 offset 
0A8C: write_memory 0x58DD0F size 4 value 2@ virtual_protect 1 // Wanted stars (active and inactive) position X

0AC6: 2@ = label @Noname_6281 offset
0A8C: write_memory 0x58DCAA size 4 value 2@ virtual_protect 1 // ???
0A8C: write_memory 0x58DD70 size 4 value 2@ virtual_protect 1 // height active wanted stars
0A8C: write_memory 0x58DF5D size 4 value 2@ virtual_protect 1 // height inactive wanted stars

0AC6: 2@ = label @Noname_6285 offset
0A8C: write_memory 0x58DCC0 size 4 value 2@ virtual_protect 1 // ???
0A8C: write_memory 0x58DD86 size 4 value 2@ virtual_protect 1 // width active wanted stars
0A8C: write_memory 0x58DF79 size 4 value 2@ virtual_protect 1 // width inactive wanted stars

0AC6: 2@ = label @Noname_6289 offset
0A8C: write_memory 0x58DFED size 4 value 2@ virtual_protect 1 // space between stars



// Radio station font
0A8C: write_memory 0x4E9EF9 size 1 value 3 virtual_protect 1 // Radio station fontstyle                 6A 02:          push    02                  overwriting value
0A8C: write_memory 0x4E9F5C size 4 value 0x0022F610 virtual_protect 1 // Radio station border           E8 30F62200:    call    00719590            overwriting address
0A8C: write_memory 0x4E9F91 size 1 value 5 virtual_protect 1 // Radio station color or shadow ?         6A 06:          push    06                  overwriting value
0A8C: write_memory 0x4E9F98 size 4 value 1@ virtual_protect 1 // Radio station color
0A8C: write_memory 0x4E9FA7 size 1 value 0 virtual_protect 1 //                                         6A 08:          push    08                  overwriting value
0A8C: write_memory 0x4E9FAE size 4 value 1@ virtual_protect 1

0AC6: 2@ = label @Noname_6213 offset 
0A8C: write_memory 0x4E9F22 size 4 value 2@ virtual_protect 1 // Radio station height

0AC6: 2@ = label @Noname_6213 offset 
2@ += 4 
0A8C: write_memory 0x4E9F38 size 4 value 2@ virtual_protect 1 // Radio station width

0AC6: 2@ = label @Noname_6305 offset 
0A8C: write_memory 0x58B01D size 4 value 2@ virtual_protect 1 //                                        1D 949A8500:    sbb     eax,00859A94        overwriting address



// Vehicle name text
0AC6: 2@ = label @Noname_6293 offset 
0A8C: write_memory 0x58B091 size 4 value 2@ virtual_protect 1 // Vehicle Height
0AC6: 2@ = label @Noname_6461 offset 
2@ -= 0x58B0AA 
0A8C: write_memory 0x58B0A5 size 1 value 0xE9 virtual_protect 1 // Vehicle Width (related)              D9 1C 24:       fstp    dword ptr [esp]         converted to E9 <address> (jump instruction)  (next bytes will be ignored)
0A8C: write_memory 0x58B0A6 size 4 value 2@ virtual_protect 1 // Vehicle Width                          editing address to previous jump <address> instruction
0A8C: write_memory 0x58B0BB size 1 value 1 virtual_protect 1 // Vehicle Fontstyle
0A8C: write_memory 0x58B0C2 size 1 value 1 virtual_protect 1 // Vehicle Border
0A8C: write_memory 0x58B0C4 size 4 value 0x0018E4A8 virtual_protect 1 // Vehicle Border
0A8C: write_memory 0x58B0DD size 4 value 1@ virtual_protect 1 // Vehicle and Zone Bolour
0A8C: write_memory 0x58B0E3 size 1 value 4 virtual_protect 1 // Vehicle Colour

0AC6: 2@ = label @Noname_6301 offset 
0A8C: write_memory 0x58B135 size 4 value 2@ virtual_protect 1 // Vehicle Pos Y

0AC6: 2@ = label @Noname_6325 offset 
2@ += 28 
0A8C: write_memory 0x58AEB0 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58AECA size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58AEF0 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58AF0B size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58AF91 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58AFBC size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58AFE9 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58B02A size 4 value 2@ virtual_protect 1



// Zone info text
0AC6: 2@ = label @Noname_6305 offset 
0A8C: write_memory 0x58AC95 size 4 value 2@ virtual_protect 1

0AC6: 2@ = label @Noname_6293 offset 
0A8C: write_memory 0x58AD2C size 4 value 2@ virtual_protect 1 // Zone Height

0AC6: 2@ = label @Noname_6297 offset 
0A8C: write_memory 0x58AD42 size 4 value 2@ virtual_protect 1 // Zone Width
0A8C: write_memory 0x58AD4F size 1 value 1 virtual_protect 1 // Zone Border
0A8C: write_memory 0x58AD51 size 4 value 0x0018E81B virtual_protect 1 // Zone Border
0A8C: write_memory 0x58AD74 size 5 value 0x90 virtual_protect 1 


0AC6: 2@ = label @Noname_6480 offset
2@ -= 0x58AD9E
0A8C: write_memory 0x58AD99 size 1 value 0xE9 virtual_protect 1
0A8C: write_memory 0x58AD9A size 4 value 2@ virtual_protect 1 // Zone Fontstyle     // it is very probable that 6A 01: push 01 inside @Noname_6480 is the value of fontstyle... so, what is the original?

0A8C: write_memory 0x58ADF6 size 4 value 1@ virtual_protect 1 // Zone Color

0AC6: 2@ = label @Noname_6309 offset
0A8C: write_memory 0x58AE3A size 4 value 2@ virtual_protect 1 // Zone Pos Y




0A8C: write_memory 0x58CC6A size 5 value 0x90 virtual_protect 1 // Hide Original Styled Text 3 (Wasted or busted text)
0A8C: write_memory 0x53E500 size 4 value 0x000515D5 virtual_protect 1


0AC6: 2@ = label @Noname_6526 offset 
2@ -= 0x58EE9F 
0A8C: write_memory 0x58EE9B size 4 value 2@ virtual_protect 1 // Hide health bar
0A8C: write_memory 0x58EF6B size 5 value 0x90 virtual_protect 1 // Hide armour bar
0A8C: write_memory 0x58F131 size 5 value 0x90 virtual_protect 1 // Hide breath meter
0A8C: write_memory 0x58FAD9 size 2 value 0x05C6 virtual_protect 1 
0A8C: write_memory 0x58FADB size 4 value 4@ virtual_protect 1 
0A8C: write_memory 0x58FADF size 1 value 0 virtual_protect 1 // writing in a sector that originally has 90 90 90 90 90 90, something like this:  mov     byte ptr [4@ dir],00     // what will we obtain by this? dunno!



// Radar
0AC6: 2@ = label @Noname_6313 offset // Radar height ?
0A8C: write_memory 0x5834F6 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A47D size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A632 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A6AB size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A70E size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A801 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A8AB size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A921 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A9D5 size 4 value 2@ virtual_protect 1 

0AC6: 2@ = label @Noname_6317 offset // Radar width ?
0A8C: write_memory 0x5834C2 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A449 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A7E9 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A840 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A943 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A99D size 4 value 2@ virtual_protect 1

0AC6: 2@ = label @Noname_6317 offset // Radar Y-position ?
2@ += 4 
0A8C: write_memory 0x583500 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A1A7 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A2D6 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A499 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A60E size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A71E size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A7C7 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A868 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A913 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A9C7 size 4 value 2@ virtual_protect 1 

0AC6: 2@ = label @Noname_6325 offset // Radar X-position ?
0A8C: write_memory 0x5834D4 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A469 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A5E2 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A6E6 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A79B size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A836 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A8E9 size 4 value 2@ virtual_protect 1 
0A8C: write_memory 0x58A98A size 4 value 2@ virtual_protect 1 


// Sector:     CHud::DrawSubtitles(void)
0A8C: write_memory 0x58C2BC size 5 value 0x90 virtual_protect 1 // Erasing instruction:     call    dummy_7195E0    ; *(u32 *)(_C71A84) = _a0; // color?
0A8C: write_memory 0x58C306 size 1 value 1 virtual_protect 1 //             6A 02:          push    02                      overwriting value



// Styled Texts
0A8C: write_memory 0x58C853 size 1 value 0xD8 virtual_protect 1 // changing "qword" by "dword"      DC 0D 6666E63F: fmul    qword ptr [3FE66666]    changing "qword" by "dword"
0AC6: 2@ = label @Noname_6325 offset 
2@ += 44 
0A8C: write_memory 0x58C855 size 4 value 2@ virtual_protect 1 // Styled Text 1 Height               DC 0D 6666E63F: fmul    qword ptr [3FE66666]    overwriting address

0A8C: write_memory 0x58C869 size 1 value 0xD8 virtual_protect 1 // changing "qword" by "dword"
0A8C: write_memory 0x58C86B size 4 value 2@ virtual_protect 1 // Styled Text 1 Width

0A8C: write_memory 0x58C8B1 size 1 value 0xFF virtual_protect 1 // Styled Text 1 Border Id          6A 02:          push    02                      overwriting value
0A8C: write_memory 0x58C8B3 size 4 value 0x0018CCB9 virtual_protect 1 // Styled Text 1 Border       E8 D9CC1800:    call    00719590                overwriting address
0A8C: write_memory 0x58C8F1 size 1 value 0 virtual_protect 1 // Styled Text 1 Color Id              6A 06:          push    06                      overwriting value
0A8C: write_memory 0x58C8F4 size 4 value 1@ virtual_protect 1 // Styled Text 1 color
0A8C: write_memory 0x58FCCD size 2 value 0x9090 virtual_protect 1 //                                75 1D:          jne     0058FCEC                erasing instruction

0AC6: 2@ = label @Noname_6325 offset 
2@ += 32 
0A8C: write_memory 0x58D2CD size 4 value 2@ virtual_protect 1 // Styled Text 2 Height

0AC6: 2@ = label @Noname_6492 offset
2@ -= 0x58D2E6 
0A8C: write_memory 0x58D2E1 size 1 value 0xE9 virtual_protect 1 
0A8C: write_memory 0x58D2E2 size 4 value 2@ virtual_protect 1 // Styled Text 2 Width

0A8C: write_memory 0x58D3DA size 1 value 1 virtual_protect 1 // Styled Text 2 Border Id
0A8C: write_memory 0x58D3DC size 4 value 0x0018C190 virtual_protect 1 // Styled Text 2 Border

0AC6: 2@ = label @Noname_6325 offset 
2@ += 40 
0A8C: write_memory 0x58D44F size 4 value 2@ virtual_protect 1 // Styled Text 2 Pos Y

0AC6: 2@ = label @Noname_6325 offset 
2@ += 8 
0A8C: write_memory 0x58CED4 size 4 value 2@ virtual_protect 1 // Styled Text 4 Height

0AC6: 2@ = label @Noname_6325 offset 
2@ += 12 
0A8C: write_memory 5820138 size 4 value 2@ virtual_protect 1 // Styled Text 4 Width

0A8C: write_memory 0x58CF22 size 1 value 1 virtual_protect 1 // Styled Text 4 Fontstyle
0A8C: write_memory 0x58CF29 size 1 value 1 virtual_protect 1 // Styled Text 4 Border Id
0A8C: write_memory 0x58CF2B size 4 value 0x0018C641 virtual_protect 1 // Styled Text 4 Border
0A8C: write_memory 0x58CF52 size 1 value 1 virtual_protect 1 // Styled Text 4 Color Id
0A8C: write_memory 0x58CF59 size 4 value 1@ virtual_protect 1 // Styled Text 4 RGBA Addr

0AC6: 2@ = label @Noname_6325 offset 
2@ += 4 
0A8C: write_memory 0x58CF83 size 4 value 2@ virtual_protect 1 // Styled Text 4 Pos Y


// Styled Text 5
0AC6: 2@ = label @Noname_6325 offset 
2@ += 8 
0A8C: write_memory 0x58CCCD size 4 value 2@ virtual_protect 1 // Styled Text 5 Height

0AC6: 2@ = label @Noname_6325 offset 
2@ += 12 
0A8C: write_memory 0x58CCE3 size 4 value 2@ virtual_protect 1 // Styled Text 5 Width

0A8C: write_memory 0x58CD15 size 5 value 0x90 virtual_protect 1 // Avoid "call CFont__SetCentreSize" (removes linewidth limits)
0A8C: write_memory 0x58CD1B size 1 value 1 virtual_protect 1 // Styled Text 5 Fontstyle
0A8C: write_memory 0x58CD22 size 1 value 255 virtual_protect 1 // Styled Text 5 Border Id
0A8C: write_memory 0x58CD24 size 4 value 0x0018C848 virtual_protect 1 // Styled Text 5 Border
0A8C: write_memory 0x58CD4B size 1 value 1 virtual_protect 1 // Styled Text 5 Color Id
0A8C: write_memory 0x58CD52 size 4 value 1@ virtual_protect 1 // Styled Text 5 RGBA addr

0AC6: 2@ = label @Noname_6325 offset 
2@ += 4 
0A8C: write_memory 0x58CD7C size 4 value 2@ virtual_protect 1 // Styled Text 5 Pos Y


// Styled Text 6
0AC6: 2@ = label @Noname_6325 offset 
2@ += 20 
0A8C: write_memory 0x58D14E size 4 value 2@ virtual_protect 1 // Styled Text 6 Height

0AC6: 2@ = label @Noname_6325 offset 
2@ += 24 
0A8C: write_memory 0x58D164 size 4 value 2@ virtual_protect 1 // Styled Text 6 Width

0A8C: write_memory 0x58D19C size 1 value 1 virtual_protect 1 // Styled Text 6 Fontstyle
0A8C: write_memory 0x58D1A5 size 4 value 0x0018C3C7 virtual_protect 1 // Styled Text 6 Border
0A8C: write_memory 0x58D1CC size 1 value 2 virtual_protect 1 // Styled Text 6 Color Id
0A8C: write_memory 0x58D1D3 size 4 value 1@ virtual_protect 1 // Styled Text 6 RGBA Addr

0AC6: 2@ = label @Noname_6325 offset 
2@ += 16 
0A8C: write_memory 0x58D1FD size 4 value 2@ virtual_protect 1 // Styled Text 6 Pos Y


// Styled Text 7
0A8C: write_memory 0x58CE20 size 1 value 1 virtual_protect 1 // Styled Text 7 Fontstyle
0A8C: write_memory 0x58CE29 size 4 value 0x0018C743 virtual_protect 1 // Styled Text 7 Border

// Garage Messages
0AC6: 2@ = label @Noname_6325 offset 
2@ += 48 
0A8C: write_memory 0x4477BF size 4 value 2@ virtual_protect 1 // Height
0AC6: 2@ = label @Noname_6325 offset 
2@ += 52 
0A8C: write_memory 0x4477D5 size 4 value 2@ virtual_protect 1 // Width

0AC6: 2@ = label @Noname_6325 offset 
2@ += 56 
0A8C: write_memory 0x4478B9 size 4 value 2@ virtual_protect 1 // Pos Y
0A8C: write_memory 0x447923 size 4 value 2@ virtual_protect 1 // Pos Y
0A8C: write_memory 0x447966 size 4 value 2@ virtual_protect 1 // Pos Y
0A8C: write_memory 0x44781C size 1 value 1 virtual_protect 1 // Fontstyle
0A8C: write_memory 0x447826 size 1 value 1 virtual_protect 1 // Color Id
0A8C: write_memory 0x44782D size 4 value 1@ virtual_protect 1 // RGBA addr
0A8C: write_memory 0x44783F size 1 value 255 virtual_protect 1 // Border Id
0A8C: write_memory 0x447841 size 4 value 0x002D1D2B virtual_protect 1 // Border



// Change created spheres color
0A8D: 2@ = read_memory 0x4810E0 size 1 virtual_protect 0
if 2@ == 0xE9
then
    0A8D: 2@ = read_memory 0x4810E1 size 4 virtual_protect 0
    2@ += 0x4810E5
else 2@ = 0x4810E0
end
2@ += 43
0A8C: write_memory 2@ size 1 value 192 virtual_protect 1
2@ += 2
0A8C: write_memory 2@ size 1 value 84 virtual_protect 1
2@ += 2
0A8C: write_memory 2@ size 1 value 16 virtual_protect 1

0A8C: write_memory 0x585CCB size 1 value 192 virtual_protect 1
0A8C: write_memory 0x585CCD size 1 value 84 virtual_protect 1
0A8C: write_memory 0x585CCF size 1 value 16 virtual_protect 1

// Change inner sphere color
0A8C: write_memory 0x70CD0B size 1 value 192 virtual_protect 1
0A8C: write_memory 0x70CD0D size 1 value 84 virtual_protect 1
0A8C: write_memory 0x70CD0F size 1 value 16 virtual_protect 1

// Change medium sphere color
0A8C: write_memory 0x70CD58 size 1 value 192 virtual_protect 1
0A8C: write_memory 0x70CD5A size 1 value 84 virtual_protect 1
0A8C: write_memory 0x70CD5C size 1 value 16 virtual_protect 1  // RGB: 16 84 192, this means: blue

// Change outer sphere color
0A8C: write_memory 0x70CDAB size 1 value 192 virtual_protect 1
0A8C: write_memory 0x70CDAD size 1 value 84 virtual_protect 1
0A8C: write_memory 0x70CDAF size 1 value 16 virtual_protect 1

// Change Racing Checkpoints color
0A8C: write_memory 0x493648 size 1 value 16 virtual_protect 1
0AC6: 2@ = label @Noname_6511 offset
2@ -= 0x49364E 
0A8C: write_memory 0x493649 size 1 value 0xE9 virtual_protect 1 
0A8C: write_memory 0x49364A size 4 value 2@ virtual_protect 1

{
0AC6: 2@ = label @Noname_6625 offset
2@ -= 0x57708B 
0A8C: write_memory 0x577086 size 1 value 0xE9 virtual_protect 1 
0A8C: write_memory 0x577087 size 4 value 2@ virtual_protect 1 
0AC6: 2@ = label @Noname_6643 offset 
2@ -= 0x579E6F 
0A8C: write_memory 0x579E6B size 4 value 2@ virtual_protect 1 
0AC6: 2@ = label @Noname_6534 offset 
2@ -= 0x58EBA8 
0A8C: write_memory 0x58EBA3 size 1 value 0xE9 virtual_protect 1
0A8C: write_memory 0x58EBA4 size 4 value 2@ virtual_protect 1
0AC6: 2@ = label @Noname_6680 offset 
2@ -= 0x58EC19 
0A8C: write_memory 0x58EC14 size 1 value 0xE9 virtual_protect 1 // Clock X-position related
0A8C: write_memory 0x58EC15 size 4 value 2@ virtual_protect 1 // Clock X-position
}

0ADF: add_dynamic_GXT_entry "III_HIC" text "?" 
0ADF: add_dynamic_GXT_entry "III_AIC" text "<" 

repeat
wait 0 
    if 31@ == 1 
    then
        03F0: enable_text_draw 1 
        0A8D: 29@ = read_memory 0xBAB1DC size 2 virtual_protect 0 // CHud::m_ItemToFlash
        1@ = Actor.Health($PLAYER_ACTOR)
        gosub @Noname_6117
        0340: set_text_draw_RGBA 186 101 50 255 
        
        if 1@ > 999 
        then 1@ = 999 
        end
        
        if 88B7:   not test 30@ bit 3 
        then
            if or
            10 > 1@ 
            29@ == 4 
            then
                if 32@ > 300 
                then
                    32@ = 0 
                    if 08B7:   test 30@ bit 0 
                    then 08C3: clear 30@ bit 0 
                    else 08BD: set 30@ bit 0 
                    end
                end
            else
                08BD: set 30@ bit 0 
                32@ = 0 
            end
        end
        
        if 08B7:   test 30@ bit 0 
        then
            0AD3: 2@v = format "%03d" 1@  
            0ADF: add_dynamic_GXT_entry "III_HEA" text 2@v 
            033E: set_draw_text_position 484.5 66.0 GXT "III_HEA" 
            gosub @Noname_6117 
            0340: set_text_draw_RGBA 186 101 50 255 
            033E: set_draw_text_position 459.7 66.0 GXT "III_HIC" 
        end
        
        if gosub @Noname_6152 
        then
            0652: 1@ = integer_stat 4080 
            0653: 2@ = float_stat 225 // Lung capacity
            0653: 3@ = float_stat 22 // Stamina
            005B: 2@ += 3@ // (float) 
            2@ *= 1.5 
            2@ += 1000.0
            if 1150.0 > 2@ 
            then 2@ = 1150.0 
            end
            0073: 1@ /= 2@ // (float) 
            1@ *= 100.0 
            0092: 1@ = float 1@ to_integer 
            gosub @Noname_6117 
            0340: set_text_draw_RGBA 142 187 204 255 
            
            if 29@ == 10 
            then
                if 33@ > 300 
                then
                    33@ = 0 
                    if 08B7:   test 30@ bit 2 
                    then 08C3: clear 30@ bit 2 
                    else 08BD: set 30@ bit 2 
                    end
                end
            else
                08BD: set 30@ bit 2 
                33@ = 0 
            end
            
            if 08B7:   test 30@ bit 2 
            then
                0AD3: 2@v = format "^%03d" 1@  
                0ADF: add_dynamic_GXT_entry "III_OXY" text 2@v 
                033E: set_draw_text_position 389.0 66.0 GXT "III_OXY" 
            end
        else
            04DD: 1@ = actor $PLAYER_ACTOR armour 
            if 1@ > 0 
            then
                gosub @Noname_6117 
                0340: set_text_draw_RGBA 124 140 95 255 
                if 1@ > 999 
                then 1@ = 999 
                end
                if 29@ == 3 
                then
                    if 33@ > 300 
                    then
                        33@ = 0 
                        if 08B7:   test 30@ bit 1 
                        then 08C3: clear 30@ bit 1 
                        else 08BD: set 30@ bit 1 
                        end
                    end
                else
                    08BD: set 30@ bit 1 
                    33@ = 0 
                end
                if 08B7:   test 30@ bit 1 
                then
                    0AD3: 2@v = format "%03d" 1@  
                    0ADF: add_dynamic_GXT_entry "III_ARM" text 2@v 
                    033E: set_draw_text_position 411.0 66.0 GXT "III_ARM" 
                    gosub @Noname_6117 
                    0340: set_text_draw_RGBA 124 140 95 255 
                    033E: set_draw_text_position 392.0 66.0 GXT "III_AIC" 
                end
            end
        end
    end
    0A8D: 0@ = read_memory 0xBAADC0 size 1 virtual_protect 0
    if 0@ > 0 
    then
        0ADF: add_dynamic_GXT_entry "EMUTXT3" text 0xBAADC0 
        03E0: draw_text_behind_textures 1 
        033F: set_text_draw_letter_size 2.0 3.9 
        03E4: set_text_draw_align_right 1 
        0349: set_text_draw_font 3 
        060D: draw_text_shadow 3 rgba 0 0 0 255 
        0340: set_text_draw_RGBA 170 123 87 255 
        033E: set_draw_text_position 616.0 367.0 GXT "EMUTXT3" 
    end
until false

:Noname_6117
03E0: draw_text_behind_textures 1 
033F: set_text_draw_letter_size 0.8 2.6 
0349: set_text_draw_font 3 
060D: draw_text_shadow 1 rgba 0 0 0 255 
return 

:Noname_6152
if 8965:   not actor $PLAYER_ACTOR swimming 
then
    if and
    Actor.Driving($PLAYER_ACTOR)
    84A7:   not actor $PLAYER_ACTOR driving_boat 
    then
        0811: 1@ = actor $PLAYER_ACTOR used_car 
        02BF:   car 1@ sunk 
    end
else 0485:   return_true 
end
return 

:Noname_6213
851F:   not 
hex
 AB 3F CD CC 4C 3F 00 00 B4 41
end

:Noname_6225
0000: NOP 
hex
 DE 42 00 00 EE 42 00 00 DC 42
end

:Noname_6237
0000: NOP 
hex
 2E 42 00 00 DC 41 00 00 48 C1
end

:Noname_6249
0000: NOP 
hex
 7E 42
end

:Noname_6253
hex
 9A 99 19 3F
end

:Noname_6257
hex
 CD CC CC 3E
end

:Noname_6261
0000: NOP 
hex
 3A 42
end

:Noname_6265
0000: NOP 
hex
 82 42
end

:Noname_6269
0000: NOP 
hex
 AE 42
end

:Noname_6273
hex
 9A 99 B4 42
end

:Noname_6277
hex
 33 33 51 42
end

:Noname_6281
hex
 66 66 A6 3F
end

:Noname_6285
hex
 CD CC 4C 3F
end

:Noname_6289
0000: NOP 
hex
 B8 41
end

:Noname_6293
hex
 33 33 93 3F
end

:Noname_6297
hex
 9A 99 99 3F
end

:Noname_6301
0000: NOP 
hex
 58 42
end

:Noname_6305
hex
 00 40 1C 46
end

:Noname_6309
0000: NOP 
hex
 BF 42
end

:Noname_6313
0000: NOP 
hex
 90 42
end

:Noname_6317
0000: NOP 
hex
 B4 42 00 00 F2 42
end

:Noname_6325
0000: NOP 
hex
 D8 41 00 00 27 43 9A 99 B9 3F 9A 99 99 3F 00 80
 4C 43 8F C2 95 3F 00 00 80 3F 00 00 00 00 C3 F5
 C8 3F B8 1E 85 3F 00 00 B6 42 66 66 E6 3F 33 33
 B3 3F 00 00 00 3F 00 00 1B 43
end

:Noname_6385
hex
 66 85 8F FF 59 73 96 FF BA 65 32 FF 98 9A 52 FF
 C2 A5 78 FF 8E BB CC FF 00 00 00 FF
end

:Noname_6413
hex
 25 64 3A 25 30 32 64 41 4D 00
end

:Noname_6423
hex
 25 64 3A 25 30 32 64 50 4D 00
end

:Noname_6433
hex
 4F 4E 2C 20 32 34 48 20 43 4C 4F 43 4B 00
end

:Noname_6447
hex
 4F 4E 2C 20 31 32 48 20 43 4C 4F 43 4B 00
end

:Noname_6461
hex
 D8                 //  add     al,bl
 0D 00 00 00 00     //  or      eax,40AE8A5
 D9 1C 24           //  fstp    dword ptr [esp]
 E8 00 00 00 00     //  call    gta_sa.exe+3193A0(007193A0)  // sub_7193A0      proc near               ; CODE XREF: CMenu__DrawTextBoxWTitle
 E9 00 00 00 00     //  jmp     0058B0AD
end

:Noname_6480
hex
 E8 00 00 00 00     //  call    gta_sa.exe+319510(00719510)  // __setFontShadowRGBA proc near
 6A 01              //  push    01
 E9 00 00 00 00     //  jmp     gta_sa.exe+18AD9F(0058AD9F)
end

:Noname_6492
hex
 D8 0D 00 00 00 00  //  fmul    dword ptr [040AE8E5]
 D9 1C 24           //  fstp    dword ptr [esp]
 E8 00 00 00 00     //  call    gta_sa.exe+319380(00719380)  // int __cdecl StoreTextDrawLetterSize(float lWidth,float lHeight)
 E9 00 00 00 00     //  jmp     gta_sa.exe+18D2E9(0058D2E9)
end

:Noname_6511
hex
 C6 44 24 3C 54     //  mov     byte ptr [esp+3C],54
 C6 44 24 38 C0     //  mov     byte ptr [esp+38],-40
 E9 00 00 00 00     //  jmp     gta_sa.exe+93651(00493651)
end

:Noname_6526
hex
 C6 05 00 00 00 00 01   //  mov     byte ptr [04224AE8],01
 C3                     //  ret
end

:Noname_6534
hex
 80 3D 69 67 BA 00 02   //  cmp     byte ptr [00BA6769],02
 75 47                  //  jne     040AE9E2
 83 F9 00               //  cmp     ecx,00
 75 07                  //  jne     040AE9A7
 B9 0C 00 00 00         //  mov     ecx,0000000C
 EB 0A                  //  jmp     040AE9B1
 83 F9 0C               //  cmp     ecx,0C
 75 05                  //  jne     040AE9B1
 B9 18 00 00 00         //  mov     ecx,00000018
 83 F9 0C               //  cmp     ecx,0C
 7E 07                  //  jle     040AE9BD
 83 E9 0C               //  sub     ecx,0C
 B2 00                  //  mov     dl,00
 EB 02                  //  jmp     040AE9BF
 B2 01                  //  mov     dl,01
 50                     //  push    eax
 51                     //  push    ecx
 80 FA 01               //  cmp     dl,01
 75 0E                  //  jne     040AE9D4
 8D 54 24 1C            //  lea     edx,[esp+1C]
 68 00 00 00 00         //  push    040AE919                [%d:%02dAM]
 E9 00 00 00 00         //  jmp     0058EBAE
 8D 54 24 1C            //  lea     edx,[esp+1C]
 68 00 00 00 00         //  push    040AE923                [%d:%02dPM]
 E9 00 00 00 00         //  jmp     0058EBAE
 50                     //  push    eax
 51                     //  push    ecx
 8D 54 24 1C            //  lea     edx,[esp+1C]
 E9 00 00 00 00         //  jmp     0058EBA9
end

:Noname_6625
hex
 3C 02          //  cmp     al,02
 74 07          //  je      040AE9F8
 FE C0          //  inc     al
 E9 00 00 00 00 //  jmp     0057708B
 B0 00          //  mov     al,00
 E9 00 00 00 00 //  jmp     0057708B
end

:Noname_6643
hex
 B9 40 B3 C1 00     //  mov     ecx,00C1B340
 3C 01              //  cmp     al,01
 75 0A              //  jne     040AEA12
 BE 00 00 00 00     //  mov     esi,040AE92D            [ON, 24H CLOCK]
 E9 00 00 00 00     //  jmp     0057A168
 3C 02              //  cmp     al,02
 0F 85 00 00 00 00  //  jne     00579F65
 BE 00 00 00 00     //  mov     esi,040AE93B            [ON, 12H CLOCK]
 E9 00 00 00 00     //  jmp     0057A168
end

:Noname_6680
hex
 80 3D 69 67 BA 00 02   //  cmp     byte ptr [00BA6769],02
 75 0B                  //  jne     040AEA38
 D8 0D 00 00 00 00      //  fmul    dword ptr [040AE861]
 E9 00 00 00 00         //  jmp     0058EC1A
 D8 0D 00 00 00 00      //  fmul    dword ptr [040AE85D]
 E9 00 00 00 00         //  jmp     0058EC1A
end
