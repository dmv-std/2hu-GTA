{$CLEO .cs}
thread 'PosActors'

{======================================================================
======================================================================}
const
    {===================================
    ====================================}
    {IFP_FEM_SLOW = "bj_fem1b"
    IFP_MALE_SLOW = "bj_male1"
    IFP_FEM_FAST = "bj_fem13"
    IFP_MALE_FAST = "bj_male3"
    
    POS_IFP = IFP_FEM_SLOW
    
    IFP_FEM_SLOW = "anal_fem1_slow"
    IFP_MALE_SLOW = "anal_male1_slow"
    IFP_FEM_FAST = "anal_fem1_fast"
    IFP_MALE_FAST = "anal_male1_fast"
    
    POS_IFP = "sex_fem1_idle"
    
    GENERIC_ANIM = "sex_pose"
    
    POS_ACTOR_SKIN = 'bdoll'

    DEBUG_ACTRESS_SKIN = 'bdoll'
    DEBUG_ACTOR_SKIN = 'tumi'}
    
    F_YES = 1
    F_NO = 0
    {DEBUG_CREATE_FEM = F_NO
    DEBUG_CREATE_MALE = F_NO}
    F_SLOW = 0
    F_FAST = 1

    {===================================
    Constants
    ====================================}
    POS_OFFSET = 0.0//0.5
    POS_STEP_INCREASING = 0.1
    ANG_STEP_INCREASING = 45.0
    
    {===================================
    ====================================}
    PositioningActor = 0@
    FlagActorCreated = 1@
    State = 2@
    VariableState = 3@
    PosStepInc = 4@
    AngleStepInc = 5@
    Actor_X = 6@
    Actor_Y = 7@
    Actor_Z = 8@
    Actor_A = 9@
    Dummy1 = 10@
    Dummy2 = 11@
    Debug_Actress = 12@
    Debug_Actor = 13@
    Debug_SlowOrFast = 14@
    PosActFile = 15@
    Debug_CreateFem = 16@
    Debug_CreateMale = 17@
    Debug_FemX = 18@
    Debug_FemY = 19@
    Debug_FemZ = 20@
    Debug_FemA = 21@
    Debug_MaleX = 22@
    Debug_MaleY = 23@
    Debug_MaleZ = 24@
    Debug_MaleA = 25@
    ASPack = 31@
    
    // VariableState Values
    POS_X = 0
    POS_Y = 1
    POS_Z = 2
    POS_A = 3
    STEP_POS = 4
    STEP_ANGLE = 5
    
    // Inc or dec flag (Modifying step)
    FLAG_INCREASE = 1
    FLAG_DECREASE = 0
    
    // File handle
    BIN_READ = 0x6272
    TXT_READ = 0x72
    BIN_WRITE = 0x6277
    TXT_WRITE = 0x77
    
    // Offset values (for scm function: Get Long/Short String from Prog Mem)
    OFFSET_SKIN = 0
    OFFSET_ANIM = 1
    OFFSET_IFP = 3
    OFFSET_SLOW_ANIM = 1
    OFFSET_SLOW_IFP = 3
    OFFSET_FAST_ANIM = 5
    OFFSET_FAST_IFP = 7
    
    // Flag for generate ini file
    FLAG_RECORD = 1
    FLAG_INITIALIZE = 0
    
    CONFIG_FILE_PATH = "cleo/PositioningActors.ini"

    {===================================
    ====================================}
    KEY_E = 0x45
    KEY_P = 80
    KEY_BCKSPC = 0x8
    KEY_NUMPAD_PLUS = 0x6b
    KEY_NUMPAD_MINUS = 0x6d
    KEY_LEFT_ARROW = 0x25
    KEY_RIGHT_ARROW = 0x27
    KEY_0 = 0x30
    KEY_NUMPAD_0 = 0x60
    KEY_NUMPAD_DIV = 0x6F
    KEY_NUMPAD_MULT = 0x6A
    KEY_NUMPAD_8 = 104
    KEY_NUMPAD_6 = 102
    KEY_NUMPAD_4 = 100
    KEY_NUMPAD_2 = 98

    {===================================
    Key config
    Backspace: colocar actor de prueba (o quitarlo)
    / or * : cambiar variable a modificar (coord x, y z o angulo)
    + or - : modificar variable
    ====================================}
    KEY_TOGGLE_ACTIVITY = KEY_BCKSPC
    KEY_CHANGE_ATTRIBUTE_MINUS = KEY_NUMPAD_4
    KEY_CHANGE_ATTRIBUTE_PLUS = KEY_NUMPAD_6
    KEY_DEC = KEY_NUMPAD_2
    KEY_INC = KEY_NUMPAD_8
    KEY_TOGGLE_SPEED = KEY_P
    KEY_STORE_INTO_FILE = KEY_NUMPAD_0
end

{======================================================================
======================================================================}
:PosActors_Main
gosub @InitGXTs

while true
wait 0
    if 0AB0:   key_pressed KEY_TOGGLE_ACTIVITY
    then
        repeat
        wait 0
        until 8AB0:   not key_pressed KEY_TOGGLE_ACTIVITY
        if FlagActorCreated == 0
        then
            FlagActorCreated=1
            0AB1: call @InitMemData 0 ret Debug_FemX Debug_FemY Debug_FemZ Debug_FemA Debug_MaleX Debug_MaleY Debug_MaleZ Debug_MaleA Debug_CreateFem Debug_CreateMale
            
            0A9A: PosActFile = openfile CONFIG_FILE_PATH mode "wb+"  // IF and SET
            0AB1: call @GenerateIniFile 16 PosActFile Debug_FemX Debug_FemY Debug_FemZ Debug_FemA Debug_CreateFem Debug_MaleX Debug_MaleY Debug_MaleZ Debug_MaleA Debug_CreateMale FLAG_INITIALIZE 0.0 0.0 0.0 0.0
            0A9B: closefile PosActFile
            
            Debug_SlowOrFast = F_SLOW
            0AB1: @Debug_GenerateSexScene 10 Debug_FemX Debug_FemY Debug_FemZ Debug_FemA Debug_MaleX Debug_MaleY Debug_MaleZ Debug_MaleA Debug_CreateFem Debug_CreateMale ret Debug_Actress Debug_Actor

            0AB1: @CreateActor 0 PositioningActor Actor_X Actor_Y Actor_Z Actor_A
            0AB1: @LoadAnimToActors 5 PositioningActor Debug_Actress Debug_Actor Debug_CreateFem Debug_CreateMale ret Debug_SlowOrFast
            
            PosStepInc = POS_STEP_INCREASING
            AngleStepInc = ANG_STEP_INCREASING
            03F0: enable_text_draw 1
            0826: enable_hud 0
            0581: enable_radar 0
            VariableState=0
            0337: set_actor $PLAYER_ACTOR visibility 0
            //01B4: set_player $PLAYER_CHAR can_move 0
            //067C: put_camera_on_actor PositioningActor offset 0.0 2.0 2.0 rotation 0.0 0.0 0.0 tilt 0.0 switchstyle 2
        else
            FlagActorCreated=0
            03F0: enable_text_draw 0
            0826: enable_hud 1
            0581: enable_radar 1
            034F: destroy_actor_with_fade PositioningActor
            034F: destroy_actor_with_fade Debug_Actress
            034F: destroy_actor_with_fade Debug_Actor
            0337: set_actor $PLAYER_ACTOR visibility 1
            01B4: set_player $PLAYER_CHAR can_move 1
            //0373: set_camera_directly_behind_player
            //02EB: restore_camera_with_jumpcut
            03E6: remove_text_box
            State=0
        end
    end
    
    if FlagActorCreated == 1
    then
        gosub @DrawActorProperties

        if State == 0
        then
            gosub @update_and_show_text_box_content
            State=1
        end

        if State == 1
        then
            if 0AB0:   key_pressed KEY_INC
            then wait 10
                0AB1: @ModifyActorProperty 9 PositioningActor VariableState true PosStepInc AngleStepInc Actor_X Actor_Y Actor_Z Actor_A PositioningActor Actor_X Actor_Y Actor_Z Actor_A
                0AB1: @LoadAnimToActors 5 PositioningActor Debug_Actress Debug_Actor Debug_CreateFem Debug_CreateMale ret Debug_SlowOrFast
                0AB1: @ModifyStep 4 PosStepInc AngleStepInc VariableState FLAG_INCREASE PosStepInc AngleStepInc
            end
            
            if 0AB0:   key_pressed KEY_DEC
            then wait 10
                0AB1: @ModifyActorProperty 9 PositioningActor VariableState false PosStepInc AngleStepInc Actor_X Actor_Y Actor_Z Actor_A PositioningActor Actor_X Actor_Y Actor_Z Actor_A
                0AB1: @LoadAnimToActors 5 PositioningActor Debug_Actress Debug_Actor Debug_CreateFem Debug_CreateMale ret Debug_SlowOrFast
                0AB1: @ModifyStep 4 PosStepInc AngleStepInc VariableState FLAG_DECREASE PosStepInc AngleStepInc
            end
            
            if 0AB0:   key_pressed KEY_CHANGE_ATTRIBUTE_MINUS
            then
                repeat
                wait 0
                until 8AB0:   not key_pressed KEY_CHANGE_ATTRIBUTE_MINUS
                0AB1: @IncOrDecVariable 3 VariableState 5 FLAG_DECREASE VariableState
                State=0
            end

            if 0AB0:   key_pressed KEY_CHANGE_ATTRIBUTE_PLUS
            then
                repeat
                wait 0
                until 8AB0:   not key_pressed KEY_CHANGE_ATTRIBUTE_PLUS
                0AB1: @IncOrDecVariable 3 VariableState 5 FLAG_INCREASE VariableState
                State=0
            end

            if 0AB0:   key_pressed KEY_STORE_INTO_FILE
            then
                repeat
                wait 0
                until 8AB0:   not key_pressed KEY_STORE_INTO_FILE
                
                0A9A: PosActFile = openfile CONFIG_FILE_PATH mode "wb+"  // IF and SET
                0AB1: call @GenerateIniFile 16 PosActFile Debug_FemX Debug_FemY Debug_FemZ Debug_FemA Debug_CreateFem Debug_MaleX Debug_MaleY Debug_MaleZ Debug_MaleA Debug_CreateMale FLAG_RECORD Actor_X Actor_Y Actor_Z Actor_A
                0A9B: closefile PosActFile
                0ACE: show_formatted_text_box "Position stored in ~y~%s" CONFIG_FILE_PATH
            end
        end
        
        0AB1: @Debug_SexSceneToggleSpeed 5 Debug_Actress Debug_Actor Debug_CreateFem Debug_CreateMale Debug_SlowOrFast ret Debug_SlowOrFast
    end
end
0A93: end_custom_thread

{======================================================================
======================================================================}
:CreateActor
const
    CrAc_X = 2@
    CrAc_Y = 3@
    CrAc_Z = 4@
    CrAc_Actor = 5@
    CrAc_Angle = 6@
end
0AB1: call @GetShortStringFromProgMem 2 label @PosActor offset OFFSET_SKIN ret 10@ 11@
023C: load_special_actor 10@s as 1
038B: load_requested_models
repeat
wait 0
until 023D:   special_actor 1 loaded
00A0: store_actor $PLAYER_ACTOR position_to CrAc_X CrAc_Y CrAc_Z
000B: CrAc_X += POS_OFFSET
000B: CrAc_Y += POS_OFFSET
009A: CrAc_Actor = create_actor_pedtype 4 model #SPECIAL01 at CrAc_X CrAc_Y CrAc_Z
0173: set_actor CrAc_Actor Z_angle_to 0.0
0619: enable_actor CrAc_Actor collision_detection 0
0296: unload_special_actor 1
0AB2: ret 5 CrAc_Actor CrAc_X CrAc_Y CrAc_Z 0.0

{======================================================================
======================================================================}
const
    LdAn_PosActor = 0@
    LdAn_DbgActress = 1@
    LdAn_DbgActor = 2@
    LdAn_DbgCreateFem = 3@
    LdAn_DbgCreateMale = 4@
    // 6@v (Pos Actor Anim), 10@v (Pos Actor Ifp), 14@v (Debug Actress Anim), 18@v (Debug Actress Ifp), 22@v (Debug Actor Anim), 26@v (Debug Actor Ifp)
end
:LoadAnimToActors
0AB1: call @GetLongStringFromProgMem 2 label @PosActor offset OFFSET_ANIM ret 6@ 7@ 8@ 9@
0AB1: call @GetLongStringFromProgMem 2 label @PosActor offset OFFSET_IFP ret 10@ 11@ 12@ 13@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_ANIM ret 14@ 15@ 16@ 17@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_IFP ret 18@ 19@ 20@ 21@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_ANIM ret 22@ 23@ 24@ 25@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_IFP ret 26@ 27@ 28@ 29@

04ED: load_animation 10@v
repeat
wait 0
until 04EE:   animation 10@v loaded

if LdAn_DbgCreateFem == F_YES
then 04ED: load_animation 18@v
    repeat
    wait 0
    until 04EE:   animation 18@v loaded
end

if LdAn_DbgCreateMale == F_YES
then 04ED: load_animation 26@v
    repeat
    wait 0
    until 04EE:   animation 26@v loaded
end

{0615: define_AS_pack_begin ASPack
0605: actor -1 perform_animation "swt_wllshoot_in_R" IFP "swat" framedelta 4.0 loop 0 lockX 0 lockY 0 lockF 0 time -1
0605: actor -1 perform_animation "swt_wllshoot_out_R" IFP "swat" framedelta 4.0 loop 0 lockX 0 lockY 0 lockF 0 time -1
0643: set_AS_pack ASPack loop 1
0616: define_AS_pack_end ASPack
0618: assign_actor PositioningActor to_AS_pack ASPack
061B: remove_references_to_AS_pack ASPack}

0605: actor LdAn_PosActor perform_animation 6@v IFP 10@v framedelta 4.0 loop 1 lockX 0 lockY 0 lockF 0 time -1
0614: set_actor LdAn_PosActor animation 6@v progress_to 0.0 // 0.0 to 1.0
if LdAn_DbgCreateFem == F_YES
then 0605: actor LdAn_DbgActress perform_animation 14@v IFP 18@v framedelta 4.0 loop 1 lockX 0 lockY 0 lockF 0 time -1
    0614: set_actor LdAn_DbgActress animation 14@v progress_to 0.0 // 0.0 to 1.0
end
if LdAn_DbgCreateMale == F_YES
then 0605: actor LdAn_DbgActor perform_animation 22@v IFP 26@v framedelta 4.0 loop 1 lockX 0 lockY 0 lockF 0 time -1
    0614: set_actor LdAn_DbgActor animation 22@v progress_to 0.0 // 0.0 to 1.0
end
04EF: release_animation 10@v
04EF: release_animation 18@v
04EF: release_animation 26@v
0AB2: ret 1 F_SLOW

{======================================================================
======================================================================}
:update_and_show_text_box_content
if VariableState == POS_X
then 0512: show_permanent_text_box 'MOD_X' // Modificar coord X de Actor 1.
end
if VariableState == POS_Y
then 0512: show_permanent_text_box 'MOD_Y' // Modificar coord Y de Actor 1.
end
if VariableState == POS_Z
then 0512: show_permanent_text_box 'MOD_Z' // Modificar coord Z de Actor 1.
end
if VariableState == POS_A
then 0512: show_permanent_text_box 'MOD_A' // Modificar angulo de Actor 1.
end
if VariableState == STEP_POS
then 0512: show_permanent_text_box 'MOD_PS' // Modificar factor de incremento (posicion).
end
if VariableState == STEP_ANGLE
then 0512: show_permanent_text_box 'MOD_AS' // Modificar factor de incremento (angulo).
end
return

{======================================================================
======================================================================}
:GenerateIniFile
// Inputs
// 0@: file, 1@ 2@ 3@ 4@: female coordinates, 5@: female create flag, 6@ 7@ 8@ 9@: male coordinates, 10@ male create flag, 11@: flag record actor position, 12@ 13@ 14@ 15@: positioned actor coordinates
0AD9: write_formatted_text "#===========================================================%c%c" in_file 0@ 0xd 0xa
0AD9: write_formatted_text "# Positioning Actor script	Ver 0.2%c%c" in_file 0@ 0xd 0xa
0AD9: write_formatted_text "#===========================================================%c%c" in_file 0@ 0xd 0xa
0AD9: write_formatted_text "%c%c" in_file 0@ 0xd 0xa
0AD9: write_formatted_text "# Actor to position%c%c" in_file 0@ 0xd 0xa

0AB1: call @GetShortStringFromProgMem 2 label @PosActor offset OFFSET_SKIN ret 16@ 17@
0AB1: call @GetLongStringFromProgMem 2 label @PosActor offset OFFSET_ANIM ret 18@ 19@ 20@ 21@
0AB1: call @GetLongStringFromProgMem 2 label @PosActor offset OFFSET_IFP ret 22@ 23@ 24@ 25@
0AD9: write_formatted_text "skin: %s%c%c" in_file 0@ 16@s 0xd 0xa
0AD9: write_formatted_text "animation: %s%c%c" in_file 0@ 18@v 0xd 0xa
0AD9: write_formatted_text "ifp: %s%c%c" in_file 0@ 22@v 0xd 0xa
if 11@ == FLAG_INITIALIZE
then 0AD9: write_formatted_text "coord: none (position your actor in your desired place and press %cNUMPAD_0%c to obtain coordinates)%c%c" in_file 0@ 0x22 0x22 0xd 0xa
else 0AD9: write_formatted_text "coord: xyz %f %f %f angle %f%c%c" in_file 0@ 12@ 13@ 14@ 15@ 0xd 0xa
end
0AD9: write_formatted_text "%c%c" in_file 0@ 0xd 0xa

0AB1: call @GetShortStringFromProgMem 2 label @DebugActress offset OFFSET_SKIN ret 16@ 17@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_ANIM ret 18@ 19@ 20@ 21@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_IFP ret 22@ 23@ 24@ 25@
0AD9: write_formatted_text "# Female actor for sex scene%c%c" in_file 0@ 0xd 0xa
0AD9: write_formatted_text "female skin: %s%c%c" in_file 0@ 16@s 0xd 0xa
0AD9: write_formatted_text "fem slow animation: %s%c%c" in_file 0@ 18@v 0xd 0xa
0AD9: write_formatted_text "fem slow ifp: %s%c%c" in_file 0@ 22@v 0xd 0xa
0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_FAST_ANIM ret 18@ 19@ 20@ 21@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_FAST_IFP ret 22@ 23@ 24@ 25@
0AD9: write_formatted_text "fem fast animation: %s%c%c" in_file 0@ 18@v 0xd 0xa
0AD9: write_formatted_text "fem fast ifp: %s%c%c" in_file 0@ 22@v 0xd 0xa
if 5@ == F_YES
then 0AD9: write_formatted_text "female generate: YES%c%c" in_file 0@ 0xd 0xa
else 0AD9: write_formatted_text "female generate: NO%c%c" in_file 0@ 0xd 0xa
end
0AD9: write_formatted_text "female coordinates: xyz %f %f %f angle %f%c%c" in_file 0@ 1@ 2@ 3@ 4@ 0xd 0xa
0AD9: write_formatted_text "%c%c" in_file 0@ 0xd 0xa

0AB1: call @GetShortStringFromProgMem 2 label @DebugActor offset OFFSET_SKIN ret 16@ 17@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_ANIM ret 18@ 19@ 20@ 21@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_IFP ret 22@ 23@ 24@ 25@
0AD9: write_formatted_text "# Male actor for sex scene%c%c" in_file 0@ 0xd 0xa
0AD9: write_formatted_text "male skin: %s%c%c" in_file 0@ 16@s 0xd 0xa
0AD9: write_formatted_text "male slow animation: %s%c%c" in_file 0@ 18@v 0xd 0xa
0AD9: write_formatted_text "male slow ifp: %s%c%c" in_file 0@ 22@v 0xd 0xa
0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_FAST_ANIM ret 18@ 19@ 20@ 21@
0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_FAST_IFP ret 22@ 23@ 24@ 25@
0AD9: write_formatted_text "male fast animation: %s%c%c" in_file 0@ 18@v 0xd 0xa
0AD9: write_formatted_text "male fast ifp: %s%c%c" in_file 0@ 22@v 0xd 0xa
if 10@ == F_YES
then 0AD9: write_formatted_text "male generate: YES%c%c" in_file 0@ 0xd 0xa
else 0AD9: write_formatted_text "male generate: NO%c%c" in_file 0@ 0xd 0xa
end
0AD9: write_formatted_text "male coordinates: xyz %f %f %f angle %f%c%c" in_file 0@ 6@ 7@ 8@ 9@ 0xd 0xa
0AD9: write_formatted_text "%c%c" in_file 0@ 0xd 0xa
0AB2: ret 0

{======================================================================
======================================================================}
:IncOrDecVariable
if 0039:   2@ == FLAG_INCREASE
then
    if 003B:   0@ == 1@  // (int)
    then 0@ = 0
    else 0@++
    end
else // 2@ == FLAG_DECREASE
    if 0@ == 0
    then 0085: 0@ = 1@ // (int)
    else 0@--
    end
end
0AB2: ret 1 0@

{======================================================================
======================================================================}
:ModifyActorProperty
const
    IncDecAcPr_Actor = 0@
    IncDecAcPr_Var = 1@
    // 2@: flag - true to increment - false to decrement
    IncDecAcPr_PosStep = 3@
    IncDecAcPr_AngStep = 4@
    IncDecAcPr_X = 5@
    IncDecAcPr_Y = 6@
    IncDecAcPr_Z = 7@
    IncDecAcPr_A = 8@
end
if IncDecAcPr_Var == POS_X
then 0AB1: call_scm_func @AddOrSubstractOffset 3 IncDecAcPr_X IncDecAcPr_PosStep 2@ IncDecAcPr_X
end
if IncDecAcPr_Var == POS_Y
then 0AB1: call_scm_func @AddOrSubstractOffset 3 IncDecAcPr_Y IncDecAcPr_PosStep 2@ IncDecAcPr_Y
end
if IncDecAcPr_Var == POS_Z
then 0AB1: call_scm_func @AddOrSubstractOffset 3 IncDecAcPr_Z IncDecAcPr_PosStep 2@ IncDecAcPr_Z
end
if IncDecAcPr_Var == POS_A
then 0AB1: call_scm_func @AddOrSubstractOffset 3 IncDecAcPr_A IncDecAcPr_AngStep 2@ IncDecAcPr_A
end
if or
IncDecAcPr_Var == STEP_POS
IncDecAcPr_Var == STEP_ANGLE
then 0AB2: ret 5 IncDecAcPr_Actor IncDecAcPr_X IncDecAcPr_Y IncDecAcPr_Z IncDecAcPr_A
end
00A1: put_actor IncDecAcPr_Actor at IncDecAcPr_X IncDecAcPr_Y IncDecAcPr_Z
0173: set_actor IncDecAcPr_Actor Z_angle_to IncDecAcPr_A
0AB2: ret 5 IncDecAcPr_Actor IncDecAcPr_X IncDecAcPr_Y IncDecAcPr_Z IncDecAcPr_A

{======================================================================
======================================================================}
:ModifyStep
const
    ModStep_PosStep = 0@
    ModStep_AngleStep = 1@
    ModStep_VarState = 2@
    MS_IncOrDec = 3@
    MS_Array = 4@
    MS_A0 = 4@
    MS_A1 = 5@
    MS_A2 = 6@
    MS_Index = 7@
end

if ModStep_VarState == STEP_POS
then
    MS_A0=0.1
    MS_A1=0.01
    MS_A2=0.001
    for MS_Index = 0 to 2
        if 0045:   ModStep_PosStep == MS_Array(MS_Index,3f)  // (float)
        then break
        end
    end
    0AB1: call_scm_func @IncOrDecVariable 3 MS_Index 2 MS_IncOrDec MS_Index
    0087: ModStep_PosStep = MS_Array(MS_Index,3f) // (float)
end
if ModStep_VarState == STEP_ANGLE
then
    MS_A0=1.0
    MS_A1=10.0
    MS_A2=45.0
    for MS_Index = 0 to 2
        if 0045:   ModStep_AngleStep == MS_Array(MS_Index,3f)  // (float)
        then break
        end
    end
    0AB1: call_scm_func @IncOrDecVariable 3 MS_Index 2 MS_IncOrDec MS_Index
    0087: ModStep_AngleStep = MS_Array(MS_Index,3f) // (float)
end
0AB2: ret 2 ModStep_PosStep ModStep_AngleStep



{======================================================================
======================================================================}
:AddOrSubstractOffset
if 2@ == true
then 005B: 0@ += 1@  // (float)
else 0063: 0@ -= 1@  // (float)
end
0AB2: ret 1 0@


{======================================================================
======================================================================}
:FloatToInt
const
    OutputIntegerPart = 1@
    OutputDecimalPart = 2@
    f2i_Dummy = 3@
    PRESITION = 1000000.0
end
0092: OutputIntegerPart = float 0@ to_integer
0087: OutputDecimalPart = 0@ // (float)
0097: make OutputDecimalPart absolute_float
0093: f2i_Dummy = integer OutputIntegerPart to_float
0097: make f2i_Dummy absolute_float
0063: OutputDecimalPart -= f2i_Dummy  // (float)
0011: OutputDecimalPart *= PRESITION
0092: OutputDecimalPart = float OutputDecimalPart to_integer
0AB2: ret 2 OutputIntegerPart OutputDecimalPart

{======================================================================
======================================================================}
:DrawActorProperties
gosub @DrawTextSettings
033E: set_draw_text_position 510.0 353.0 GXT 'SHOW_PS'
gosub @DrawTextSettings
033E: set_draw_text_position 510.0 365.0 GXT 'SHOW_AS'
gosub @DrawTextSettings
033E: set_draw_text_position 510.0 377.0 GXT 'SHOW_X'
gosub @DrawTextSettings
033E: set_draw_text_position 510.0 389.0 GXT 'SHOW_Y'
gosub @DrawTextSettings
033E: set_draw_text_position 510.0 401.0 GXT 'SHOW_Z'
gosub @DrawTextSettings
033E: set_draw_text_position 510.0 413.0 GXT 'SHOW_A'

0AB1: call_scm_func @DrawFloatsWithPrecision 3 PosStepInc 550.0 353.0
0AB1: call_scm_func @DrawFloatsWithPrecision 3 AngleStepInc 550.0 365.0
0AB1: call_scm_func @DrawFloatsWithPrecision 3 Actor_X 550.0 377.0
0AB1: call_scm_func @DrawFloatsWithPrecision 3 Actor_Y 550.0 389.0
0AB1: call_scm_func @DrawFloatsWithPrecision 3 Actor_Z 550.0 401.0
0AB1: call_scm_func @DrawFloatsWithPrecision 3 Actor_A 550.0 413.0
return

:DrawTextSettings
0349: set_text_draw_font 1
033F: set_text_draw_letter_size 0.2 1.2
0343: set_text_draw_linewidth 640.0
return

{======================================================================
======================================================================}
:DrawFloatsWithPrecision
const
    DrFlwP_Float = 0@
    DrFlwP_X = 1@
    DrFlwP_Y = 2@
    DrFlwP_Aux = 3@
    DrFlwP_Int = 4@
    DrFlwP_Dec = 5@
end

0349: set_text_draw_font 1
0343: set_text_draw_linewidth 640.0
033F: set_text_draw_letter_size 0.2 1.2

0AB1: call_scm_func @ObtainDecimalPartFromFloat 1 DrFlwP_Float DrFlwP_Aux
0013: DrFlwP_Aux *= 1000000.0

0AB1: call_scm_func @floatToInt 1 DrFlwP_Float DrFlwP_Int DrFlwP_Dec

if DrFlwP_Aux >= 100000.0 // xxx xxx
then 045B: draw_text_2numbers DrFlwP_X DrFlwP_Y GXT 'FLOAT_N' numbers DrFlwP_Int DrFlwP_Dec  // ~1~.~1~
end
if and
100000.0 > DrFlwP_Aux
DrFlwP_Aux >= 10000.0 // 0xx xxx
then 045B: draw_text_2numbers DrFlwP_X DrFlwP_Y GXT 'FLOAT_1' numbers DrFlwP_Int DrFlwP_Dec  // ~1~.0~1~
end
if and
10000.0 > DrFlwP_Aux
DrFlwP_Aux >= 1000.0 // 00x xxx
then 045B: draw_text_2numbers DrFlwP_X DrFlwP_Y GXT 'FLOAT_2' numbers DrFlwP_Int DrFlwP_Dec  // ~1~.00~1~
end
if and
1000.0 > DrFlwP_Aux
DrFlwP_Aux >= 100.0 // 000 xxx
then 045B: draw_text_2numbers DrFlwP_X DrFlwP_Y GXT 'FLOAT_3' numbers DrFlwP_Int DrFlwP_Dec  // ~1~.000~1~
end
if and
100.0 > DrFlwP_Aux
DrFlwP_Aux >= 10.0 // 000 0xx
then 045B: draw_text_2numbers DrFlwP_X DrFlwP_Y GXT 'FLOAT_4' numbers DrFlwP_Int DrFlwP_Dec  // ~1~.0000~1~
end
if and
10.0 > DrFlwP_Aux
DrFlwP_Aux >= 1.0 // 000 00x
then 045B: draw_text_2numbers DrFlwP_X DrFlwP_Y GXT 'FLOAT_5' numbers DrFlwP_Int DrFlwP_Dec  // ~1~.00000~1~
end
if 1.0 > DrFlwP_Aux
then 045B: draw_text_2numbers DrFlwP_X DrFlwP_Y GXT 'FLOAT_N' numbers DrFlwP_Int DrFlwP_Dec  // ~1~.~1~
end
0AB2: ret 0

{======================================================================
======================================================================}
:ObtainDecimalPartFromFloat
const
    ObDc_Float = 0@
    ObDc_IntPart = 1@
    ObDc_DecPart = 2@
    ObDc_Aux = 3@
end
0092: ObDc_IntPart = float ObDc_Float to_integer
0087: ObDc_DecPart = ObDc_Float // (float)
0097: make ObDc_DecPart absolute_float
0093: ObDc_Aux = integer ObDc_IntPart to_float
0097: make ObDc_Aux absolute_float
0063: ObDc_DecPart -= ObDc_Aux  // (float)
0AB2: ret 1 ObDc_DecPart

{======================================================================
======================================================================}
:Debug_GenerateSexScene
const
    Sx_FmX = 0@
    Sx_FmY = 1@
    Sx_FmZ = 2@
    Sx_FmA = 3@
    Sx_MlX = 4@
    Sx_MlY = 5@
    Sx_MlZ = 6@
    Sx_MlA = 7@
    Sx_FlagCreateFem = 8@
    Sx_FlagCreateMale = 9@
    Sx_Actress = 10@
    Sx_Actor = 11@
    
    // 12@s: Female Skin, 14@v: Fem slow anim, 18@v: Fem slow Ifp, 22@s: Male skin, 24@v: Male slow anim, 28@v: Male slow Ifp
end
if Sx_FlagCreateFem == F_YES
then
    0AB1: call @GetShortStringFromProgMem 2 label @DebugActress offset OFFSET_SKIN ret 12@ 13@
    0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_ANIM ret 14@ 15@ 16@ 17@
    0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_IFP ret 18@ 19@ 20@ 21@
    023C: load_special_actor 12@s as 1
    04ED: load_animation 18@v
    038B: load_requested_models
    repeat
    wait 0
    until 023D:   special_actor 1 loaded and 04EE:   animation 18@v loaded
    009A: Sx_Actress = create_actor_pedtype 5 model #SPECIAL01 at Sx_FmX Sx_FmY Sx_FmZ
    0173: set_actor Sx_Actress Z_angle_to Sx_FmA
    0619: enable_actor Sx_Actress collision_detection 0
    0296: unload_special_actor 1
end

if Sx_FlagCreateMale == F_YES
then
    0AB1: call @GetShortStringFromProgMem 2 label @DebugActor offset OFFSET_SKIN ret 22@ 23@
    0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_ANIM ret 24@ 25@ 26@ 27@
    0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_IFP ret 28@ 29@ 30@ 31@
    023C: load_special_actor 22@s as 2
    04ED: load_animation 28@v
    038B: load_requested_models
    repeat
    wait 0
    until 023D:   special_actor 2 loaded and 04EE:   animation 28@v loaded
    009A: Sx_Actor = create_actor_pedtype 4 model #SPECIAL02 at Sx_MlX Sx_MlY Sx_MlZ
    0173: set_actor Sx_Actor Z_angle_to Sx_MlA
    0619: enable_actor Sx_Actor collision_detection 0
    0296: unload_special_actor 2
end

if Sx_FlagCreateFem == F_YES
then 0605: actor Sx_Actress perform_animation 14@v IFP 18@v framedelta 4.0 loop 1 lockX 0 lockY 0 lockF 0 time -1
end
if Sx_FlagCreateMale == F_YES
then 0605: actor Sx_Actor perform_animation 24@v IFP 28@v framedelta 4.0 loop 1 lockX 0 lockY 0 lockF 0 time -1
end

if Sx_FlagCreateFem == F_YES
then 04EF: release_animation 18@v
end
if Sx_FlagCreateMale == F_YES
then 04EF: release_animation 28@v
end
0AB2: ret 2 Sx_Actress Sx_Actor

{======================================================================
======================================================================}
:Debug_SexSceneToggleSpeed
const
    Ts_Actress = 0@
    Ts_Actor = 1@
    Ts_FlagCreateFem = 2@
    Ts_FlagCreateMale = 3@
    Ts_SlowOrFast = 4@
    // 10@v: fem fast/slow ifp   20@v: male fast/slow ifp
    // 15@v: fem fast/slow anim  25@v: male fast/slow anim
end
if 0AB0:   key_pressed KEY_TOGGLE_SPEED
then
    repeat
    wait 0
    until 8AB0:   not key_pressed KEY_TOGGLE_SPEED
    if Ts_SlowOrFast == F_SLOW
    then
        Ts_SlowOrFast=F_FAST
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_FAST_IFP ret 10@ 11@ 12@ 13@
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_FAST_ANIM ret 15@ 16@ 17@ 18@
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_FAST_IFP ret 20@ 21@ 22@ 23@
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_FAST_ANIM ret 25@ 26@ 27@ 28@
    else
        Ts_SlowOrFast=F_SLOW
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_IFP ret 10@ 11@ 12@ 13@
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActress offset OFFSET_SLOW_ANIM ret 15@ 16@ 17@ 18@
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_IFP ret 20@ 21@ 22@ 23@
        0AB1: call @GetLongStringFromProgMem 2 label @DebugActor offset OFFSET_SLOW_ANIM ret 25@ 26@ 27@ 28@
    end

    if Ts_FlagCreateFem == F_YES
    then
        04ED: load_animation 10@v
        038B: load_requested_models
        repeat
        wait 0
        until 04EE:   animation 10@v loaded and 04EE:   animation 20@v loaded
    end

    if Ts_FlagCreateMale == F_YES
    then
        04ED: load_animation 20@v
        038B: load_requested_models
        repeat
        wait 0
        until 04EE:   animation 10@v loaded and 04EE:   animation 20@v loaded
    end

    if Ts_FlagCreateFem == F_YES
    then
        0605: actor Ts_Actress perform_animation 15@v IFP 10@v framedelta 4.0 loop 1 lockX 0 lockY 0 lockF 0 time -1
        0614: set_actor Ts_Actress animation 15@v progress_to 0.0 // 0.0 to 1.0
    end
    if Ts_FlagCreateMale == F_YES
    then
        0605: actor Ts_Actor perform_animation 25@v IFP 20@v framedelta 4.0 loop 1 lockX 0 lockY 0 lockF 0 time -1
        0614: set_actor Ts_Actor animation 25@v progress_to 0.0 // 0.0 to 1.0
    end
    04EF: release_animation 10@v
    04EF: release_animation 20@v
end
0AB2: ret 1 Ts_SlowOrFast


{======================================================================
GXT (or Fake XT) entries
======================================================================}

:InitGXTs
0ADF: add_dynamic_GXT_entry "MOD_X" text "Modificar coord X."
0ADF: add_dynamic_GXT_entry "MOD_Y" text "Modificar coord Y."
0ADF: add_dynamic_GXT_entry "MOD_Z" text "Modificar coord Z."
0ADF: add_dynamic_GXT_entry "MOD_A" text "Modificar angulo."
0ADF: add_dynamic_GXT_entry "MOD_PS" text "Modificar factor de incremento (posicion)."
0ADF: add_dynamic_GXT_entry "MOD_AS" text "Modificar factor de incremento (angulo)."

0ADF: add_dynamic_GXT_entry "SHOW_PS" text "Pos step:"
0ADF: add_dynamic_GXT_entry "SHOW_AS" text "Angle step:"
0ADF: add_dynamic_GXT_entry "SHOW_X" text "X:"
0ADF: add_dynamic_GXT_entry "SHOW_Y" text "Y:"
0ADF: add_dynamic_GXT_entry "SHOW_Z" text "Z:"
0ADF: add_dynamic_GXT_entry "SHOW_A" text "Angle:"

0ADF: add_dynamic_GXT_entry "FLOAT_N" text "~1~.~1~"
0ADF: add_dynamic_GXT_entry "FLOAT_1" text "~1~.0~1~"
0ADF: add_dynamic_GXT_entry "FLOAT_2" text "~1~.00~1~"
0ADF: add_dynamic_GXT_entry "FLOAT_3" text "~1~.000~1~"
0ADF: add_dynamic_GXT_entry "FLOAT_4" text "~1~.0000~1~"
0ADF: add_dynamic_GXT_entry "FLOAT_5" text "~1~.00000~1~"
return

{======================================================================
======================================================================}
const
    FLAG_MALE = 0
    FLAG_FEMALE = 1
    
    Cfg_File = 1@
    Cfg_Dummy = 2@
end
:ReadPositioningActorData
0A9A: Cfg_File = openfile CONFIG_FILE_PATH mode TXT_READ  // IF and SET
repeat    
    0ADA: Cfg_Dummy = scan_file Cfg_File format "skin: %s animation: %s ifp: %s" 4@s 6@v 10@v //IF and SET
    if Cfg_Dummy == 3
    then 0485:  return_true
        break
    end
    if 0AD6:   end_of_file Cfg_File reached
    then 059A:  return_false
        break
    else gosub @GotoNextLine
    end
until false
0A9B: closefile Cfg_File
0AB2: ret 10 4@ 5@ 6@ 7@ 8@ 9@ 10@ 11@ 12@ 13@

:ReadDebugActorsCoordinates
0A9A: Cfg_File = openfile CONFIG_FILE_PATH mode TXT_READ  // IF and SET
repeat    
    if 0@ == FLAG_FEMALE
    then 0ADA: Cfg_Dummy = scan_file Cfg_File format "female coordinates: xyz %f %f %f angle %f" 4@ 5@ 6@ 7@ //IF and SET
    else 0ADA: Cfg_Dummy = scan_file Cfg_File format "male coordinates: xyz %f %f %f angle %f" 4@ 5@ 6@ 7@ //IF and SET
    end
    if Cfg_Dummy == 4
    then 0485:  return_true
        break
    end
    if 0AD6:   end_of_file Cfg_File reached
    then 059A:  return_false
        break
    else gosub @GotoNextLine
    end
until false
0A9B: closefile Cfg_File
0AB2: ret 4 4@ 5@ 6@ 7@

:ReadDebugActors
0A9A: Cfg_File = openfile CONFIG_FILE_PATH mode TXT_READ  // IF and SET
repeat    
    if 0@ == FLAG_FEMALE
    then 0ADA: Cfg_Dummy = scan_file Cfg_File format "female skin: %s fem slow animation: %s fem slow ifp: %s fem fast animation: %s fem fast ifp: %s female generate: %s" 4@s 6@v 10@v 14@v 18@v 22@s //IF and SET
    else 0ADA: Cfg_Dummy = scan_file Cfg_File format "male skin: %s male slow animation: %s male slow ifp: %s male fast animation: %s male fast ifp: %s male generate: %s" 4@s 6@v 10@v 14@v 18@v 22@s //IF and SET
    end
    if Cfg_Dummy == 6
    then 0485:  return_true
        break
    end
    if 0AD6:   end_of_file Cfg_File reached
    then 059A:  return_false
        break
    else gosub @GotoNextLine
    end
until false
0A9B: closefile Cfg_File
0AB2: ret 20 4@ 5@ 6@ 7@ 8@ 9@ 10@ 11@ 12@ 13@ 14@ 15@ 16@ 17@ 18@ 19@ 20@ 21@ 22@ 23@

:GotoNextLine
repeat
0A9D: readfile Cfg_File size 1 to Cfg_Dummy
until 0039:   Cfg_Dummy == 0xa
return

:GetShortStringFromProgMem
// 0@: label - 1@: offset
0AC6: 30@ = label 0@ offset
000A: 2@ += 8
006A: 2@ *= 1@  // (int)
005A: 30@ += 2@  // (int)
0A8D: 10@ = read_memory 30@ size 4 virtual_protect 0
30@+=4
0A8D: 11@ = read_memory 30@ size 4 virtual_protect 0
0AB2: ret 2 10@ 11@   

:GetLongStringFromProgMem
// 0@: label - 1@: offset
0AC6: 30@ = label 0@ offset
000A: 2@ += 8
006A: 2@ *= 1@  // (int)
005A: 30@ += 2@  // (int)
0A8D: 10@ = read_memory 30@ size 4 virtual_protect 0
30@+=4
0A8D: 11@ = read_memory 30@ size 4 virtual_protect 0
30@+=4
0A8D: 12@ = read_memory 30@ size 4 virtual_protect 0
30@+=4
0A8D: 13@ = read_memory 30@ size 4 virtual_protect 0
0AB2: ret 4 10@ 11@ 12@ 13@ 

{======================================================================
======================================================================}
:InitMemData
0AB1: call @ReadPositioningActorData 0 ret 4@ 5@ 6@ 7@ 8@ 9@ 10@ 11@ 12@ 13@
0AC6: 0@ = label @PosActor offset
for 1@ = 0 to 9
    0A8C: write_memory 0@ size 4 value 4@(1@,10i) virtual_protect 0
    0@+=4
end

0AB1: call @ReadDebugActors 1 FLAG_FEMALE ret 4@ 5@ 6@ 7@ 8@ 9@ 10@ 11@ 12@ 13@ 14@ 15@ 16@ 17@ 18@ 19@ 20@ 21@ 22@ 23@
0AC6: 0@ = label @DebugActress offset
for 1@ = 0 to 17
    0A8C: write_memory 0@ size 4 value 4@(1@,10i) virtual_protect 0
    0@+=4
end
if 22@s == 'YES'
then 24@=F_YES
else 24@=F_NO
end

0AB1: call @ReadDebugActors 1 FLAG_MALE ret 4@ 5@ 6@ 7@ 8@ 9@ 10@ 11@ 12@ 13@ 14@ 15@ 16@ 17@ 18@ 19@ 20@ 21@ 22@ 23@
0AC6: 0@ = label @DebugActor offset
for 1@ = 0 to 17
    0A8C: write_memory 0@ size 4 value 4@(1@,10i) virtual_protect 0
    0@+=4
end
if 22@s == 'YES'
then 25@=F_YES
else 25@=F_NO
end

0AB1: call @ReadDebugActorsCoordinates 1 FLAG_FEMALE ret 4@ 5@ 6@ 7@
0AB1: call @ReadDebugActorsCoordinates 1 FLAG_MALE ret 8@ 9@ 10@ 11@
0AB2: ret 10 4@ 5@ 6@ 7@ 8@ 9@ 10@ 11@ 24@ 25@

{======================================================================
======================================================================}
:PosActor
hex
00000000 00000000                    // Skin
00000000 00000000 00000000 00000000  // Anim
00000000 00000000 00000000 00000000  // Ifp
end

:DebugActress
hex
00000000 00000000                    // Skin
00000000 00000000 00000000 00000000  // Slow anim
00000000 00000000 00000000 00000000  // Slow Ifp
00000000 00000000 00000000 00000000  // Fast anim
00000000 00000000 00000000 00000000  // Fast Ifp
end

:DebugActor
hex
00000000 00000000                    // Skin
00000000 00000000 00000000 00000000  // Slow anim
00000000 00000000 00000000 00000000  // Slow Ifp
00000000 00000000 00000000 00000000  // Fast anim
00000000 00000000 00000000 00000000  // Fast Ifp
end


